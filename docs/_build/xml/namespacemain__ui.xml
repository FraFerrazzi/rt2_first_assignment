<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacemain__ui" kind="namespace" language="Python">
    <compoundname>main_ui</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacemain__ui_1a146c1c580cdd167d1255c496f543be46" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float main_ui.th_reach</definition>
        <argsstring></argsstring>
        <name>th_reach</name>
        <initializer>=  0.3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="50" column="1" bodyfile="scripts/main_ui.py" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemain__ui_1a0e6a9ea38d369ebeede101aff38bd225" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float main_ui.th_collision</definition>
        <argsstring></argsstring>
        <name>th_collision</name>
        <initializer>=  0.7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="52" column="1" bodyfile="scripts/main_ui.py" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemain__ui_1a52a94ebe5662aa54332d47a8404aadb1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>main_ui.max_time</definition>
        <argsstring></argsstring>
        <name>max_time</name>
        <initializer>=  rospy.Duration(120)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="54" column="1" bodyfile="scripts/main_ui.py" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemain__ui_1ac50f1689685b3e817eb95f064cd37e67" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string main_ui.input_man</definition>
        <argsstring></argsstring>
        <name>input_man</name>
        <initializer>=  &apos;a&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="56" column="1" bodyfile="scripts/main_ui.py" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemain__ui_1ad6d9f076ab8d9c6cd0a335c283cf7162" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool main_ui.goal_set</definition>
        <argsstring></argsstring>
        <name>goal_set</name>
        <initializer>=  False</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="58" column="1" bodyfile="scripts/main_ui.py" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemain__ui_1a74a54df8f081b26848e0b9049bc8cf40" prot="public" static="no" mutable="no">
        <type></type>
        <definition>main_ui.vel_msg</definition>
        <argsstring></argsstring>
        <name>vel_msg</name>
        <initializer>=  Twist()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="60" column="1" bodyfile="scripts/main_ui.py" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemain__ui_1a1d82cf822a8c942ee9c0a464449247ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.print_ui</definition>
        <argsstring>()</argsstring>
        <name>print_ui</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function used to print on the screen the user interfaces which contains the list of the
options that the user choose.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="63" column="1" bodyfile="scripts/main_ui.py" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1a12e80dbd942030c660606af6fb5e22b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.check_user_input</definition>
        <argsstring>()</argsstring>
        <name>check_user_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function that checks the user&apos;s input inserted using the keyboard and returns it.
 
Returns:
    user_input (Int): user&apos;s input.</verbatim> <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="79" column="1" bodyfile="scripts/main_ui.py" bodystart="79" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1a87aa92859d2adc0f14077be28a154de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.print_goal</definition>
        <argsstring>()</argsstring>
        <name>print_goal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function used to print on screen the goal given by the user once is set.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="99" column="1" bodyfile="scripts/main_ui.py" bodystart="99" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1aa240721f9a74d6f4bd9e65e41ba9797e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.set_goal</definition>
        <argsstring>()</argsstring>
        <name>set_goal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function that set the target, which is a point inside the two dimensional simulation
environment. The robot needs to reach autonomusly the given point.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="112" column="1" bodyfile="scripts/main_ui.py" bodystart="112" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1ae1c08fa9780fcea9639f5560cbb3950a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.get_goal</definition>
        <argsstring>(msg)</argsstring>
        <name>get_goal</name>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function used to store the goal once it is published.

Args:
    msg (/move_base/goal): goal subscribed by move_base topic.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="156" column="1" bodyfile="scripts/main_ui.py" bodystart="156" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1adb9325e4b975e7ef0324905b6fe2d5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.goal_reached</definition>
        <argsstring>(msg)</argsstring>
        <name>goal_reached</name>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function that tells if the goal has been reached or not. If the target is reached, a 
message is printed.
A goal is considered to be unreachable if, after five minutes, the robot is not able 
to arrive at the desired position. If the goal is considered unreachable, a message is
printed.

Args:
    msg (/move_base/feedback): robot position according to the simulation environment.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="169" column="1" bodyfile="scripts/main_ui.py" bodystart="169" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1a6296df6ab3b3c0cdb9ee933411136082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.cancel_goal</definition>
        <argsstring>()</argsstring>
        <name>cancel_goal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function used to cancel the goal once is set by the user.
If the goal has not been set, a message is displayed.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="207" column="1" bodyfile="scripts/main_ui.py" bodystart="207" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1a7dc3a04d625808562cd6fcd2f0881fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.manual_driving</definition>
        <argsstring>()</argsstring>
        <name>manual_driving</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This function blocks the general node&apos;s user interface until the user decides to exit 
from the manual mode. In this way only the manual mode interface can be used.
It also print if the assisted manual mode is active or the one without assistance.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="228" column="1" bodyfile="scripts/main_ui.py" bodystart="228" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1a6e5eb46a8276fe5a8426bd91c7ff9225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.assisted_driving</definition>
        <argsstring>(msg)</argsstring>
        <name>assisted_driving</name>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function called each time arrives a message from the /scan topic.
If the user asks for driving assistance while it&apos;s in manual mode, the function gets  
the minimum value among a region of the laser scan. Does this for each defined region
and checks if there is an obstacle which is too close to the robot in that reagion. 
If this condition is verified, it does not allow the user to go towards the obstacle 
but only to avoid it. At the end, the correct velocity is published.
If user doesn&apos;t ask for assistance, the function does nothing.

Args:
    msg (/scan): array of 720 values defining the distances from the sensor to the
        objects in the environment  </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="266" column="1" bodyfile="scripts/main_ui.py" bodystart="266" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1ae3b202efe8a2faaa5558566da08392f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.set_user_vel</definition>
        <argsstring>(msg)</argsstring>
        <name>set_user_vel</name>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function called each time the user uses the teleop keyboard to set the robot&apos;s velocity.
If the driving mode is not in manual mode, the function does nothing.
If the driving mode is in manual mode, it checks if the driving assistance is active.
If the driving assistance is not active, the velocity decided by the user is published.
If is active, the value of the velocity is set and checked by the assisted_driving
function before it gets published.

Args:
    msg (/us_cmd_vel): the desired robot velocity.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="339" column="1" bodyfile="scripts/main_ui.py" bodystart="339" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1a06b779059ec010ddf241d7b03b616662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.driving_decision</definition>
        <argsstring>(input_u)</argsstring>
        <name>driving_decision</name>
        <param>
          <type>input_u</type>
          <defname>input_u</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function used to decide the behavior of the robot according to the user input.
This function decides the driving modality and the actions that the robot does according
to the input given from the keyboard by the user.
 
Args:
    input_u (Int): user&apos;s input</verbatim> <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="368" column="1" bodyfile="scripts/main_ui.py" bodystart="368" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespacemain__ui_1ad90386f6ecd8d2a7df398e5f73a54e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main_ui.main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This is the *main function* which inizializes the ROS node and defines the needed
service, publishers and subscribers.
After that it loops until the ROS node is *not* shutdown. 
While the node is looping, it calls the functions used to:
- print the user interface, 
- get and check the input given from the keyboard by the user
- decide the behavior of the robot according to the user&apos;s decision
  
The node relys on the &apos;rospy &lt;http://wiki.ros.org/rospy/&gt;&apos;_ module  
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="scripts/main_ui.py" line="440" column="1" bodyfile="scripts/main_ui.py" bodystart="440" bodyend="491"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>.. module:: main_ui
    :platform: Unix
    :synopsis: Python module for the user Interface
   
.. moduleauthor:: Francesco Ferrazzi &lt;s5262829@studenti.unige.it&gt;

ROS node for the the third assignment of the Research Track 1 course of the Robotics 
Engineering Master program. The software architecture allow to control a mobile robot 
in such a way that:
1) Autonomusly reach a (x,y) coordinate in a 2D space inserted by the user.
2) Let the user drive the robot with the keyboard.
3) Let the user drive the robot assisting them to avoid collisions.
4) Cancel the goal up to user&apos;s desire.
5) Reset robot position.

Subscribes to:
    /scan topic which contains 720 values that are distances taken by the laser scan
    /move_base/goal to get the goal position 
    /us_cmd_vel remap the desired velocity given by user
    /move_base/feedback where the simulatior publishes the robot position
  
Publishes to:
    /cmd_vel to define the wanted robot velocity
    /move_base/goal the goal that the robot will try to reach
    /move_base/cancel to cancel the given goal
  
Service:
    /gazebo/reset_world to reset the robot position</verbatim> </para>
    </detaileddescription>
    <location file="scripts/main_ui.py" line="1" column="1"/>
  </compounddef>
</doxygen>
